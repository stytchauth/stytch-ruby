# frozen_string_literal: true

# !!!
# WARNING: This file is autogenerated
# Only modify code within MANUAL() sections
# or your changes may be overwritten later!
# !!!

require_relative 'request_helper'

module StytchB2B
  class OAuth
    include Stytch::RequestHelper
    attr_reader :discovery

    def initialize(connection)
      @connection = connection

      @discovery = StytchB2B::OAuth::Discovery.new(@connection)
    end

    # Authenticate a given a `token`. This endpoint verifies that the member completed the flow by verifying that the token is valid and hasn't expired.  Provide the `session_duration_minutes` parameter to set the lifetime of the session. If the `session_duration_minutes` parameter is not specified, a Stytch session will be created with a 60 minute duration.
    #
    # If the Member is required to complete MFA to log in to the, the returned value of `member_authenticated` will be `false`, and an `intermediate_session_token` will be returned.
    # The `intermediate_session_token` can be passed into the [OTP SMS Authenticate endpoint](https://stytch.com/docs/b2b/api/authenticate-otp-sms) to complete the MFA step and acquire a full member session.
    # The `intermediate_session_token` can also be used with the [Exchange Intermediate Session endpoint](https://stytch.com/docs/b2b/api/exchange-intermediate-session) or the [Create Organization via Discovery endpoint](https://stytch.com/docs/b2b/api/create-organization-via-discovery) to join a different Organization or create a new one.
    # The `session_duration_minutes` and `session_custom_claims` parameters will be ignored.
    #
    # If a valid `session_token` or `session_jwt` is passed in, the Member will not be required to complete an MFA step.
    #
    # If the Member is logging in via an OAuth provider that does not fully verify the email, the returned value of `member_authenticated` will be `false`, and an `intermediate_session_token` will be returned.
    # The `primary_required` field details the authentication flow the Member must perform in order to [complete a step-up authentication](https://stytch.com/docs/b2b/guides/oauth/auth-flows) into the organization. The `intermediate_session_token` must be passed into that authentication flow.
    #
    # Weâ€™re actively accepting requests for new OAuth providers! Please [email us](mailto:support@stytch.com) or [post in our community](https://stytch.com/docs/b2b/resources) if you are looking for an OAuth provider that is not currently supported.
    #
    # == Parameters:
    # oauth_token::
    #   The token to authenticate.
    #   The type of this field is +String+.
    # session_token::
    #   A secret token for a given Stytch Session.
    #   The type of this field is nilable +String+.
    # session_duration_minutes::
    #   Set the session lifetime to be this many minutes from now. This will start a new session if one doesn't already exist,
    #   returning both an opaque `session_token` and `session_jwt` for this session. Remember that the `session_jwt` will have a fixed lifetime of
    #   five minutes regardless of the underlying session duration, and will need to be refreshed over time.
    #
    #   This value must be a minimum of 5 and a maximum of 527040 minutes (366 days).
    #
    #   If a `session_token` or `session_jwt` is provided then a successful authentication will continue to extend the session this many minutes.
    #
    #   If the `session_duration_minutes` parameter is not specified, a Stytch session will be created with a 60 minute duration. If you don't want
    #   to use the Stytch session product, you can ignore the session fields in the response.
    #   The type of this field is nilable +Integer+.
    # session_jwt::
    #   The JSON Web Token (JWT) for a given Stytch Session.
    #   The type of this field is nilable +String+.
    # session_custom_claims::
    #   Add a custom claims map to the Session being authenticated. Claims are only created if a Session is initialized by providing a value in
    #   `session_duration_minutes`. Claims will be included on the Session object and in the JWT. To update a key in an existing Session, supply a new value. To
    #   delete a key, supply a null value. Custom claims made with reserved claims (`iss`, `sub`, `aud`, `exp`, `nbf`, `iat`, `jti`) will be ignored.
    #   Total custom claims size cannot exceed four kilobytes.
    #   The type of this field is nilable +object+.
    # pkce_code_verifier::
    #   A base64url encoded one time secret used to validate that the request starts and ends on the same device.
    #   The type of this field is nilable +String+.
    # locale::
    #   If the needs to complete an MFA step, and the Member has a phone number, this endpoint will pre-emptively send a one-time passcode (OTP) to the Member's phone number. The locale argument will be used to determine which language to use when sending the passcode.
    #
    # Parameter is a [IETF BCP 47 language tag](https://www.w3.org/International/articles/language-tags/), e.g. `"en"`.
    #
    # Currently supported languages are English (`"en"`), Spanish (`"es"`), and Brazilian Portuguese (`"pt-br"`); if no value is provided, the copy defaults to English.
    #
    # Request support for additional languages [here](https://docs.google.com/forms/d/e/1FAIpQLScZSpAu_m2AmLXRT3F3kap-s_mcV6UTBitYn6CdyWP0-o7YjQ/viewform?usp=sf_link")!
    #
    #   The type of this field is nilable +AuthenticateRequestLocale+ (string enum).
    # intermediate_session_token::
    #   Adds this primary authentication factor to the intermediate session token. If the resulting set of factors satisfies the organization's primary authentication requirements and MFA requirements, the intermediate session token will be consumed and converted to a member session. If not, the same intermediate session token will be returned.
    #   The type of this field is nilable +String+.
    #
    # == Returns:
    # An object with the following fields:
    # request_id::
    #   Globally unique UUID that is returned with every API call. This value is important to log for debugging purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
    #   The type of this field is +String+.
    # member_id::
    #   Globally unique UUID that identifies a specific Member.
    #   The type of this field is +String+.
    # provider_subject::
    #   The unique identifier for the User within a given OAuth provider. Also commonly called the `sub` or "Subject field" in OAuth protocols.
    #   The type of this field is +String+.
    # provider_type::
    #   Denotes the OAuth identity provider that the user has authenticated with, e.g. Google, Microsoft, GitHub etc.
    #   The type of this field is +String+.
    # session_token::
    #   A secret token for a given Stytch Session.
    #   The type of this field is +String+.
    # session_jwt::
    #   The JSON Web Token (JWT) for a given Stytch Session.
    #   The type of this field is +String+.
    # member::
    #   The [Member object](https://stytch.com/docs/b2b/api/member-object)
    #   The type of this field is +Member+ (+object+).
    # organization_id::
    #   Globally unique UUID that identifies a specific Organization. The `organization_id` is critical to perform operations on an Organization, so be sure to preserve this value.
    #   The type of this field is +String+.
    # organization::
    #   The [Organization object](https://stytch.com/docs/b2b/api/organization-object).
    #   The type of this field is +Organization+ (+object+).
    # reset_sessions::
    #   (no documentation yet)
    #   The type of this field is +Boolean+.
    # member_authenticated::
    #   Indicates whether the Member is fully authenticated. If false, the Member needs to complete an MFA step to log in to the Organization.
    #   The type of this field is +Boolean+.
    # intermediate_session_token::
    #   The returned Intermediate Session Token contains an OAuth factor associated with the Member's email address. If this value is non-empty, the member must complete an MFA step to finish logging in to the Organization. The token can be used with the [OTP SMS Authenticate endpoint](https://stytch.com/docs/b2b/api/authenticate-otp-sms), [TOTP Authenticate endpoint](https://stytch.com/docs/b2b/api/authenticate-totp), or [Recovery Codes Recover endpoint](https://stytch.com/docs/b2b/api/recovery-codes-recover) to complete an MFA flow and log in to the Organization. It can also be used with the [Exchange Intermediate Session endpoint](https://stytch.com/docs/b2b/api/exchange-intermediate-session) to join a specific Organization that allows the factors represented by the intermediate session token; or the [Create Organization via Discovery endpoint](https://stytch.com/docs/b2b/api/create-organization-via-discovery) to create a new Organization and Member.
    #   The type of this field is +String+.
    # status_code::
    #   The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g. 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
    #   The type of this field is +Integer+.
    # member_session::
    #   The [Session object](https://stytch.com/docs/b2b/api/session-object).
    #   The type of this field is nilable +MemberSession+ (+object+).
    # provider_values::
    #   The `provider_values` object lists relevant identifiers, values, and scopes for a given OAuth provider. For example this object will include a provider's `access_token` that you can use to access the provider's API for a given user.
    #
    #   Note that these values will vary based on the OAuth provider in question, e.g. `id_token` is only returned by Microsoft. Google One Tap does not return access tokens or refresh tokens.
    #   The type of this field is nilable +ProviderValues+ (+object+).
    # mfa_required::
    #   Information about the MFA requirements of the Organization and the Member's options for fulfilling MFA.
    #   The type of this field is nilable +MfaRequired+ (+object+).
    # primary_required::
    #   Information about the primary authentication requirements of the Organization.
    #   The type of this field is nilable +PrimaryRequired+ (+object+).
    def authenticate(
      oauth_token:,
      session_token: nil,
      session_duration_minutes: nil,
      session_jwt: nil,
      session_custom_claims: nil,
      pkce_code_verifier: nil,
      locale: nil,
      intermediate_session_token: nil
    )
      headers = {}
      request = {
        oauth_token: oauth_token
      }
      request[:session_token] = session_token unless session_token.nil?
      request[:session_duration_minutes] = session_duration_minutes unless session_duration_minutes.nil?
      request[:session_jwt] = session_jwt unless session_jwt.nil?
      request[:session_custom_claims] = session_custom_claims unless session_custom_claims.nil?
      request[:pkce_code_verifier] = pkce_code_verifier unless pkce_code_verifier.nil?
      request[:locale] = locale unless locale.nil?
      request[:intermediate_session_token] = intermediate_session_token unless intermediate_session_token.nil?

      post_request('/v1/b2b/oauth/authenticate', request, headers)
    end

    class Discovery
      include Stytch::RequestHelper

      def initialize(connection)
        @connection = connection
      end

      # Authenticates the Discovery token and exchanges it for an Intermediate
      # Session Token. Intermediate Session Tokens can be used for various Discovery login flows and are valid for 10 minutes.
      #
      # == Parameters:
      # discovery_oauth_token::
      #   The Discovery OAuth token to authenticate.
      #   The type of this field is +String+.
      # session_token::
      #   (no documentation yet)
      #   The type of this field is nilable +String+.
      # session_duration_minutes::
      #   (no documentation yet)
      #   The type of this field is nilable +Integer+.
      # session_jwt::
      #   (no documentation yet)
      #   The type of this field is nilable +String+.
      # session_custom_claims::
      #   (no documentation yet)
      #   The type of this field is nilable +object+.
      # pkce_code_verifier::
      #   A base64url encoded one time secret used to validate that the request starts and ends on the same device.
      #   The type of this field is nilable +String+.
      #
      # == Returns:
      # An object with the following fields:
      # request_id::
      #   Globally unique UUID that is returned with every API call. This value is important to log for debugging purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
      #   The type of this field is +String+.
      # intermediate_session_token::
      #   The Intermediate Session Token. This token does not necessarily belong to a specific instance of a Member, but represents a bag of factors that may be converted to a member session. The token can be used with the [OTP SMS Authenticate endpoint](https://stytch.com/docs/b2b/api/authenticate-otp-sms), [TOTP Authenticate endpoint](https://stytch.com/docs/b2b/api/authenticate-totp), or [Recovery Codes Recover endpoint](https://stytch.com/docs/b2b/api/recovery-codes-recover) to complete an MFA flow and log in to the Organization. It can also be used with the [Exchange Intermediate Session endpoint](https://stytch.com/docs/b2b/api/exchange-intermediate-session) to join a specific Organization that allows the factors represented by the intermediate session token; or the [Create Organization via Discovery endpoint](https://stytch.com/docs/b2b/api/create-organization-via-discovery) to create a new Organization and Member.
      #   The type of this field is +String+.
      # email_address::
      #   The email address.
      #   The type of this field is +String+.
      # discovered_organizations::
      #   An array of `discovered_organization` objects tied to the `intermediate_session_token`, `session_token`, or `session_jwt`. See the [Discovered Organization Object](https://stytch.com/docs/b2b/api/discovered-organization-object) for complete details.
      #
      #   Note that Organizations will only appear here under any of the following conditions:
      #   1. The end user is already a Member of the Organization.
      #   2. The end user is invited to the Organization.
      #   3. The end user can join the Organization because:
      #
      #       a) The Organization allows JIT provisioning.
      #
      #       b) The Organizations' allowed domains list contains the Member's email domain.
      #
      #       c) The Organization has at least one other Member with a verified email address with the same domain as the end user (to prevent phishing attacks).
      #   The type of this field is list of +DiscoveredOrganization+ (+object+).
      # provider_type::
      #   Denotes the OAuth identity provider that the user has authenticated with, e.g. Google, Microsoft, GitHub etc.
      #   The type of this field is +String+.
      # provider_tenant_id::
      #   The tenant ID returned by the OAuth provider. This is typically used to identify an organization or group within the provider's domain. For example, in HubSpot this is a Hub ID, in Slack this is the Workspace ID, and in GitHub this is an organization ID. This field will only be populated if exactly one tenant ID is returned from a successful OAuth authentication and developers should prefer `provider_tenant_ids` over this since it accounts for the possibility of an OAuth provider yielding multiple tenant IDs.
      #   The type of this field is +String+.
      # provider_tenant_ids::
      #   All tenant IDs returned by the OAuth provider. These is typically used to identify organizations or groups within the provider's domain. For example, in HubSpot this is a Hub ID, in Slack this is the Workspace ID, and in GitHub this is an organization ID. Some OAuth providers do not return tenant IDs, some providers are guaranteed to return one, and some may return multiple. This field will always be populated if at least one tenant ID was returned from the OAuth provider and developers should prefer this field over `provider_tenant_id`.
      #   The type of this field is list of +String+.
      # status_code::
      #   The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g. 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
      #   The type of this field is +Integer+.
      def authenticate(
        discovery_oauth_token:,
        session_token: nil,
        session_duration_minutes: nil,
        session_jwt: nil,
        session_custom_claims: nil,
        pkce_code_verifier: nil
      )
        headers = {}
        request = {
          discovery_oauth_token: discovery_oauth_token
        }
        request[:session_token] = session_token unless session_token.nil?
        request[:session_duration_minutes] = session_duration_minutes unless session_duration_minutes.nil?
        request[:session_jwt] = session_jwt unless session_jwt.nil?
        request[:session_custom_claims] = session_custom_claims unless session_custom_claims.nil?
        request[:pkce_code_verifier] = pkce_code_verifier unless pkce_code_verifier.nil?

        post_request('/v1/b2b/oauth/discovery/authenticate', request, headers)
      end
    end
  end
end
