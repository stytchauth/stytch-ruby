# frozen_string_literal: true

# !!!
# WARNING: This file is autogenerated
# Only modify code within MANUAL() sections
# or your changes may be overwritten later!
# !!!

require_relative 'request_helper'

module Stytch
  class Passwords
    include Stytch::RequestHelper
    attr_reader :email, :existing_password, :sessions

    def initialize(connection)
      @connection = connection

      @email = Stytch::Passwords::Email.new(@connection)
      @existing_password = Stytch::Passwords::ExistingPassword.new(@connection)
      @sessions = Stytch::Passwords::Sessions.new(@connection)
    end

    # Create a new user with a password. If `session_duration_minutes` is specified, a new session will be started as well.
    #
    # If a user with this email already exists in your Stytch project, this endpoint will return a `duplicate_email` error. To add a password to an existing passwordless user, you'll need to either call the [Migrate password endpoint](https://stytch.com/docs/api/password-migrate) or prompt the user to complete one of our password reset flows.
    #
    # This endpoint will return an error if the password provided does not meet our strength requirements, which you can check beforehand via the [Password strength check endpoint](https://stytch.com/docs/api/password-strength-check).
    #
    # When creating new Passwords users, it's good practice to enforce an email verification flow. We'd recommend checking out our [Email verification guide](https://stytch.com/docs/guides/passwords/email-verification/overview) for more information.
    #
    # == Parameters:
    # email::
    #   The email address of the end user.
    #   The type of this field is +String+.
    # password::
    #   The password of the user
    #   The type of this field is +String+.
    # session_duration_minutes::
    #   Set the session lifetime to be this many minutes from now. This will start a new session if one doesn't already exist,
    #   returning both an opaque `session_token` and `session_jwt` for this session. Remember that the `session_jwt` will have a fixed lifetime of
    #   five minutes regardless of the underlying session duration, and will need to be refreshed over time.
    #
    #   This value must be a minimum of 5 and a maximum of 527040 minutes (366 days).
    #
    #   If a `session_token` or `session_jwt` is provided then a successful authentication will continue to extend the session this many minutes.
    #
    #   If the `session_duration_minutes` parameter is not specified, a Stytch session will not be created.
    #   The type of this field is nilable +Integer+.
    # session_custom_claims::
    #   Add a custom claims map to the Session being authenticated. Claims are only created if a Session is initialized by providing a value in `session_duration_minutes`. Claims will be included on the Session object and in the JWT. To update a key in an existing Session, supply a new value. To delete a key, supply a null value.
    #
    #   Custom claims made with reserved claims ("iss", "sub", "aud", "exp", "nbf", "iat", "jti") will be ignored. Total custom claims size cannot exceed four kilobytes.
    #   The type of this field is nilable +object+.
    # trusted_metadata::
    #   The `trusted_metadata` field contains an arbitrary JSON object of application-specific data. See the [Metadata](https://stytch.com/docs/api/metadata) reference for complete field behavior details.
    #   The type of this field is nilable +object+.
    # untrusted_metadata::
    #   The `untrusted_metadata` field contains an arbitrary JSON object of application-specific data. Untrusted metadata can be edited by end users directly via the SDK, and **cannot be used to store critical information.** See the [Metadata](https://stytch.com/docs/api/metadata) reference for complete field behavior details.
    #   The type of this field is nilable +object+.
    # name::
    #   The name of the user. Each field in the name object is optional.
    #   The type of this field is nilable +Name+ (+object+).
    #
    # == Returns:
    # An object with the following fields:
    # request_id::
    #   Globally unique UUID that is returned with every API call. This value is important to log for debugging purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
    #   The type of this field is +String+.
    # user_id::
    #   The unique ID of the affected User.
    #   The type of this field is +String+.
    # email_id::
    #   The unique ID of a specific email address.
    #   The type of this field is +String+.
    # session_token::
    #   A secret token for a given Stytch Session.
    #   The type of this field is +String+.
    # session_jwt::
    #   The JSON Web Token (JWT) for a given Stytch Session.
    #   The type of this field is +String+.
    # user::
    #   The `user` object affected by this API call. See the [Get user endpoint](https://stytch.com/docs/api/get-user) for complete response field details.
    #   The type of this field is +User+ (+object+).
    # status_code::
    #   The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g. 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
    #   The type of this field is +Integer+.
    # session::
    #   If you initiate a Session, by including `session_duration_minutes` in your authenticate call, you'll receive a full Session object in the response.
    #
    #   See [GET sessions](https://stytch.com/docs/api/session-get) for complete response fields.
    #
    #   The type of this field is nilable +Session+ (+object+).
    def create(
      email:,
      password:,
      session_duration_minutes: nil,
      session_custom_claims: nil,
      trusted_metadata: nil,
      untrusted_metadata: nil,
      name: nil
    )
      headers = {}
      request = {
        email: email,
        password: password
      }
      request[:session_duration_minutes] = session_duration_minutes unless session_duration_minutes.nil?
      request[:session_custom_claims] = session_custom_claims unless session_custom_claims.nil?
      request[:trusted_metadata] = trusted_metadata unless trusted_metadata.nil?
      request[:untrusted_metadata] = untrusted_metadata unless untrusted_metadata.nil?
      request[:name] = name unless name.nil?

      post_request('/v1/passwords', request, headers)
    end

    # Authenticate a user with their email address and password. This endpoint verifies that the user has a password currently set, and that the entered password is correct. There are two instances where the endpoint will return a `reset_password` error even if they enter their previous password:
    #
    # **One:** The userâ€™s credentials appeared in the HaveIBeenPwned dataset. We force a password reset to ensure that the user is the legitimate owner of the email address, and not a malicious actor abusing the compromised credentials.
    #
    # **Two:** A user that has previously authenticated with email/password uses a passwordless authentication method tied to the same email address (e.g. Magic Links, Google OAuth) for the first time. Any subsequent email/password authentication attempt will result in this error. We force a password reset in this instance in order to safely deduplicate the account by email address, without introducing the risk of a pre-hijack account takeover attack.
    #
    # Imagine a bad actor creates many accounts using passwords and the known email addresses of their victims. If a victim comes to the site and logs in for the first time with an email-based passwordless authentication method then both the victim and the bad actor have credentials to access to the same account. To prevent this, any further email/password login attempts first require a password reset which can only be accomplished by someone with access to the underlying email address.
    #
    # == Parameters:
    # email::
    #   The email address of the end user.
    #   The type of this field is +String+.
    # password::
    #   The password of the user
    #   The type of this field is +String+.
    # session_token::
    #   The `session_token` associated with a User's existing Session.
    #   The type of this field is nilable +String+.
    # session_duration_minutes::
    #   Set the session lifetime to be this many minutes from now. This will start a new session if one doesn't already exist,
    #   returning both an opaque `session_token` and `session_jwt` for this session. Remember that the `session_jwt` will have a fixed lifetime of
    #   five minutes regardless of the underlying session duration, and will need to be refreshed over time.
    #
    #   This value must be a minimum of 5 and a maximum of 527040 minutes (366 days).
    #
    #   If a `session_token` or `session_jwt` is provided then a successful authentication will continue to extend the session this many minutes.
    #
    #   If the `session_duration_minutes` parameter is not specified, a Stytch session will not be created.
    #   The type of this field is nilable +Integer+.
    # session_jwt::
    #   The `session_jwt` associated with a User's existing Session.
    #   The type of this field is nilable +String+.
    # session_custom_claims::
    #   Add a custom claims map to the Session being authenticated. Claims are only created if a Session is initialized by providing a value in `session_duration_minutes`. Claims will be included on the Session object and in the JWT. To update a key in an existing Session, supply a new value. To delete a key, supply a null value.
    #
    #   Custom claims made with reserved claims ("iss", "sub", "aud", "exp", "nbf", "iat", "jti") will be ignored. Total custom claims size cannot exceed four kilobytes.
    #   The type of this field is nilable +object+.
    #
    # == Returns:
    # An object with the following fields:
    # request_id::
    #   Globally unique UUID that is returned with every API call. This value is important to log for debugging purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
    #   The type of this field is +String+.
    # user_id::
    #   The unique ID of the affected User.
    #   The type of this field is +String+.
    # session_token::
    #   A secret token for a given Stytch Session.
    #   The type of this field is +String+.
    # session_jwt::
    #   The JSON Web Token (JWT) for a given Stytch Session.
    #   The type of this field is +String+.
    # user::
    #   The `user` object affected by this API call. See the [Get user endpoint](https://stytch.com/docs/api/get-user) for complete response field details.
    #   The type of this field is +User+ (+object+).
    # status_code::
    #   The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g. 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
    #   The type of this field is +Integer+.
    # session::
    #   If you initiate a Session, by including `session_duration_minutes` in your authenticate call, you'll receive a full Session object in the response.
    #
    #   See [GET sessions](https://stytch.com/docs/api/session-get) for complete response fields.
    #
    #   The type of this field is nilable +Session+ (+object+).
    def authenticate(
      email:,
      password:,
      session_token: nil,
      session_duration_minutes: nil,
      session_jwt: nil,
      session_custom_claims: nil
    )
      headers = {}
      request = {
        email: email,
        password: password
      }
      request[:session_token] = session_token unless session_token.nil?
      request[:session_duration_minutes] = session_duration_minutes unless session_duration_minutes.nil?
      request[:session_jwt] = session_jwt unless session_jwt.nil?
      request[:session_custom_claims] = session_custom_claims unless session_custom_claims.nil?

      post_request('/v1/passwords/authenticate', request, headers)
    end

    # This API allows you to check whether or not the userâ€™s provided password is valid, and to provide feedback to the user on how to increase the strength of their password.
    #
    # This endpoint adapts to your Project's password strength configuration. If you're using [zxcvbn](https://stytch.com/docs/guides/passwords/strength-policy), the default, your passwords are considered valid if the strength score is >= 3. If you're using [LUDS](https://stytch.com/docs/guides/passwords/strength-policy), your passwords are considered valid if they meet the requirements that you've set with Stytch. You may update your password strength configuration in the [stytch dashboard](https://stytch.com/dashboard/password-strength-config).
    #
    #
    # ### Password feedback
    #
    # The `feedback` object contains relevant fields for you to relay feedback to users that failed to create a strong enough password.
    #
    # If you're using zxcvbn, the `feedback` object will contain `warning` and `suggestions` for any password that does not meet the zxcvbn strength requirements. You can return these strings directly to the user to help them craft a strong password.
    #
    # If you're using LUDS, the `feedback` object will contain an object named `luds_requirements` which contain a collection of fields that the user failed or passed. You'll want to prompt the user to create a password that meets all of the requirements that they failed.
    #
    # == Parameters:
    # password::
    #   The password of the user
    #   The type of this field is +String+.
    # email::
    #   The email address of the end user.
    #   The type of this field is nilable +String+.
    #
    # == Returns:
    # An object with the following fields:
    # request_id::
    #   Globally unique UUID that is returned with every API call. This value is important to log for debugging purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
    #   The type of this field is +String+.
    # valid_password::
    #   Returns `true` if the password passes our password validation. We offer two validation options, [zxcvbn](https://stytch.com/docs/passwords#strength-requirements) is the default option which offers a high level of sophistication. We also offer [LUDS](https://stytch.com/docs/passwords#strength-requirements). If an email address is included in the call we also require that the password hasn't been compromised using built-in breach detection powered by [HaveIBeenPwned](https://haveibeenpwned.com/).
    #   The type of this field is +Boolean+.
    # score::
    #   The score of the password determined by [zxcvbn](https://github.com/dropbox/zxcvbn). Values will be between 1 and 4, a 3 or greater is required to pass validation.
    #   The type of this field is +Integer+.
    # breached_password::
    #   Returns `true` if the password has been breached. Powered by [HaveIBeenPwned](https://haveibeenpwned.com/).
    #   The type of this field is +Boolean+.
    # strength_policy::
    #   The strength policy type enforced, either `zxcvbn` or `luds`.
    #   The type of this field is +String+.
    # breach_detection_on_create::
    #   Will return `true` if breach detection will be evaluated. By default this option is enabled. This option can be disabled by contacting [support@stytch.com](mailto:support@stytch.com?subject=Password%20strength%20configuration). If this value is `false` then `breached_password` will always be `false` as well.
    #   The type of this field is +Boolean+.
    # status_code::
    #   The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g. 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
    #   The type of this field is +Integer+.
    # feedback::
    #   Feedback for how to improve the password's strength [HaveIBeenPwned](https://haveibeenpwned.com/).
    #   The type of this field is nilable +Feedback+ (+object+).
    def strength_check(
      password:,
      email: nil
    )
      headers = {}
      request = {
        password: password
      }
      request[:email] = email unless email.nil?

      post_request('/v1/passwords/strength_check', request, headers)
    end

    # Adds an existing password to a User's email that doesn't have a password yet. We support migrating users from passwords stored with `bcrypt`, `scrypt`, `argon2`, `MD-5`, `SHA-1`, or `PBKDF2`. This endpoint has a rate limit of 100 requests per second.
    #
    # == Parameters:
    # email::
    #   The email address of the end user.
    #   The type of this field is +String+.
    # hash::
    #   The password hash. For a Scrypt or PBKDF2 hash, the hash needs to be a base64 encoded string.
    #   The type of this field is +String+.
    # hash_type::
    #   The password hash used. Currently `bcrypt`, `scrypt`, `argon_2i`, `argon_2id`, `md_5`, `sha_1`, and `pbkdf_2` are supported.
    #   The type of this field is +MigrateRequestHashType+ (string enum).
    # md_5_config::
    #   Optional parameters for MD-5 hash types.
    #   The type of this field is nilable +MD5Config+ (+object+).
    # argon_2_config::
    #   Required parameters if the argon2 hex form, as opposed to the encoded form, is supplied.
    #   The type of this field is nilable +Argon2Config+ (+object+).
    # sha_1_config::
    #   Optional parameters for SHA-1 hash types.
    #   The type of this field is nilable +SHA1Config+ (+object+).
    # scrypt_config::
    #   Required parameters if the scrypt is not provided in a [PHC encoded form](https://github.com/P-H-C/phc-string-format/blob/master/phc-sf-spec.md#phc-string-format).
    #   The type of this field is nilable +ScryptConfig+ (+object+).
    # pbkdf_2_config::
    #   Required additional parameters for PBKDF2 hash keys.
    #   The type of this field is nilable +PBKDF2Config+ (+object+).
    # trusted_metadata::
    #   The `trusted_metadata` field contains an arbitrary JSON object of application-specific data. See the [Metadata](https://stytch.com/docs/api/metadata) reference for complete field behavior details.
    #   The type of this field is nilable +object+.
    # untrusted_metadata::
    #   The `untrusted_metadata` field contains an arbitrary JSON object of application-specific data. Untrusted metadata can be edited by end users directly via the SDK, and **cannot be used to store critical information.** See the [Metadata](https://stytch.com/docs/api/metadata) reference for complete field behavior details.
    #   The type of this field is nilable +object+.
    # set_email_verified::
    #   Whether to set the user's email as verified. This is a dangerous field. Incorrect use may lead to users getting erroneously
    #                 deduplicated into one user object. This flag should only be set if you can attest that the user owns the email address in question.
    #                 Access to this field is restricted. To enable it, please send us a note at support@stytch.com.
    #   The type of this field is nilable +Boolean+.
    # name::
    #   The name of the user. Each field in the name object is optional.
    #   The type of this field is nilable +Name+ (+object+).
    #
    # == Returns:
    # An object with the following fields:
    # request_id::
    #   Globally unique UUID that is returned with every API call. This value is important to log for debugging purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
    #   The type of this field is +String+.
    # user_id::
    #   The unique ID of the affected User.
    #   The type of this field is +String+.
    # email_id::
    #   The unique ID of a specific email address.
    #   The type of this field is +String+.
    # user_created::
    #   In `login_or_create` endpoints, this field indicates whether or not a User was just created.
    #   The type of this field is +Boolean+.
    # user::
    #   The `user` object affected by this API call. See the [Get user endpoint](https://stytch.com/docs/api/get-user) for complete response field details.
    #   The type of this field is +User+ (+object+).
    # status_code::
    #   The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g. 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
    #   The type of this field is +Integer+.
    def migrate(
      email:,
      hash:,
      hash_type:,
      md_5_config: nil,
      argon_2_config: nil,
      sha_1_config: nil,
      scrypt_config: nil,
      pbkdf_2_config: nil,
      trusted_metadata: nil,
      untrusted_metadata: nil,
      set_email_verified: nil,
      name: nil
    )
      headers = {}
      request = {
        email: email,
        hash: hash,
        hash_type: hash_type
      }
      request[:md_5_config] = md_5_config unless md_5_config.nil?
      request[:argon_2_config] = argon_2_config unless argon_2_config.nil?
      request[:sha_1_config] = sha_1_config unless sha_1_config.nil?
      request[:scrypt_config] = scrypt_config unless scrypt_config.nil?
      request[:pbkdf_2_config] = pbkdf_2_config unless pbkdf_2_config.nil?
      request[:trusted_metadata] = trusted_metadata unless trusted_metadata.nil?
      request[:untrusted_metadata] = untrusted_metadata unless untrusted_metadata.nil?
      request[:set_email_verified] = set_email_verified unless set_email_verified.nil?
      request[:name] = name unless name.nil?

      post_request('/v1/passwords/migrate', request, headers)
    end

    class Email
      include Stytch::RequestHelper

      def initialize(connection)
        @connection = connection
      end

      # Initiates a password reset for the email address provided. This will trigger an email to be sent to the address, containing a magic link that will allow them to set a new password and authenticate.
      #
      # == Parameters:
      # email::
      #   The email of the User that requested the password reset.
      #   The type of this field is +String+.
      # reset_password_redirect_url::
      #   The url that the user clicks from the password reset email to finish the reset password flow.
      #   This should be a url that your app receives and parses before showing your app's reset password page.
      #   After the user submits a new password to your app, it should send an API request to complete the password reset process.
      #   If this value is not passed, the default reset password redirect URL that you set in your Dashboard is used.
      #   If you have not set a default reset password redirect URL, an error is returned.
      #   The type of this field is nilable +String+.
      # reset_password_expiration_minutes::
      #   Set the expiration for the password reset, in minutes. By default, it expires in 30 minutes.
      #   The minimum expiration is 5 minutes and the maximum is 7 days (10080 mins).
      #   The type of this field is nilable +Integer+.
      # code_challenge::
      #   A base64url encoded SHA256 hash of a one time secret used to validate that the request starts and ends on the same device.
      #   The type of this field is nilable +String+.
      # attributes::
      #   Provided attributes help with fraud detection.
      #   The type of this field is nilable +Attributes+ (+object+).
      # login_redirect_url::
      #   The URL Stytch redirects to after the OAuth flow is completed for a user that already exists. This URL should be a route in your application which will run `oauth.authenticate` (see below) and finish the login.
      #
      #   The URL must be configured as a Login URL in the [Redirect URL page](/dashboard/redirect-urls). If the field is not specified, the default Login URL will be used.
      #   The type of this field is nilable +String+.
      # locale::
      #   Used to determine which language to use when sending the user this delivery method. Parameter is a [IETF BCP 47 language tag](https://www.w3.org/International/articles/language-tags/), e.g. `"en"`.
      #
      # Currently supported languages are English (`"en"`), Spanish (`"es"`), and Brazilian Portuguese (`"pt-br"`); if no value is provided, the copy defaults to English.
      #
      # Request support for additional languages [here](https://docs.google.com/forms/d/e/1FAIpQLScZSpAu_m2AmLXRT3F3kap-s_mcV6UTBitYn6CdyWP0-o7YjQ/viewform?usp=sf_link")!
      #
      #   The type of this field is nilable +ResetStartRequestLocale+ (string enum).
      # reset_password_template_id::
      #   Use a custom template for password reset emails. By default, it will use your default email template.
      #   The template must be a template using our built-in customizations or a custom HTML email for Passwords - Password reset.
      #   The type of this field is nilable +String+.
      #
      # == Returns:
      # An object with the following fields:
      # request_id::
      #   Globally unique UUID that is returned with every API call. This value is important to log for debugging purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
      #   The type of this field is +String+.
      # user_id::
      #   The unique ID of the affected User.
      #   The type of this field is +String+.
      # email_id::
      #   The unique ID of a specific email address.
      #   The type of this field is +String+.
      # status_code::
      #   The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g. 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
      #   The type of this field is +Integer+.
      def reset_start(
        email:,
        reset_password_redirect_url: nil,
        reset_password_expiration_minutes: nil,
        code_challenge: nil,
        attributes: nil,
        login_redirect_url: nil,
        locale: nil,
        reset_password_template_id: nil
      )
        headers = {}
        request = {
          email: email
        }
        request[:reset_password_redirect_url] = reset_password_redirect_url unless reset_password_redirect_url.nil?
        request[:reset_password_expiration_minutes] = reset_password_expiration_minutes unless reset_password_expiration_minutes.nil?
        request[:code_challenge] = code_challenge unless code_challenge.nil?
        request[:attributes] = attributes unless attributes.nil?
        request[:login_redirect_url] = login_redirect_url unless login_redirect_url.nil?
        request[:locale] = locale unless locale.nil?
        request[:reset_password_template_id] = reset_password_template_id unless reset_password_template_id.nil?

        post_request('/v1/passwords/email/reset/start', request, headers)
      end

      # Reset the userâ€™s password and authenticate them. This endpoint checks that the magic link `token` is valid, hasnâ€™t expired, or already been used â€“ and can optionally require additional security settings, such as the IP address and user agent matching the initial reset request.
      #
      # The provided password needs to meet our password strength requirements, which can be checked in advance with the password strength endpoint. If the token and password are accepted, the password is securely stored for future authentication and the user is authenticated.
      #
      # Note that a successful password reset by email will revoke all active sessions for the `user_id`.
      #
      # == Parameters:
      # token::
      #   The Passwords `token` from the `?token=` query parameter in the URL.
      #
      #       In the redirect URL, the `stytch_token_type` will be `login` or `reset_password`.
      #
      #       See examples and read more about redirect URLs [here](https://stytch.com/docs/guides/dashboard/redirect-urls).
      #   The type of this field is +String+.
      # password::
      #   The password of the user
      #   The type of this field is +String+.
      # session_token::
      #   The `session_token` associated with a User's existing Session.
      #   The type of this field is nilable +String+.
      # session_duration_minutes::
      #   Set the session lifetime to be this many minutes from now. This will start a new session if one doesn't already exist,
      #   returning both an opaque `session_token` and `session_jwt` for this session. Remember that the `session_jwt` will have a fixed lifetime of
      #   five minutes regardless of the underlying session duration, and will need to be refreshed over time.
      #
      #   This value must be a minimum of 5 and a maximum of 527040 minutes (366 days).
      #
      #   If a `session_token` or `session_jwt` is provided then a successful authentication will continue to extend the session this many minutes.
      #
      #   If the `session_duration_minutes` parameter is not specified, a Stytch session will not be created.
      #   The type of this field is nilable +Integer+.
      # session_jwt::
      #   The `session_jwt` associated with a User's existing Session.
      #   The type of this field is nilable +String+.
      # code_verifier::
      #   A base64url encoded one time secret used to validate that the request starts and ends on the same device.
      #   The type of this field is nilable +String+.
      # session_custom_claims::
      #   Add a custom claims map to the Session being authenticated. Claims are only created if a Session is initialized by providing a value in `session_duration_minutes`. Claims will be included on the Session object and in the JWT. To update a key in an existing Session, supply a new value. To delete a key, supply a null value.
      #
      #   Custom claims made with reserved claims ("iss", "sub", "aud", "exp", "nbf", "iat", "jti") will be ignored. Total custom claims size cannot exceed four kilobytes.
      #   The type of this field is nilable +object+.
      # attributes::
      #   Provided attributes help with fraud detection.
      #   The type of this field is nilable +Attributes+ (+object+).
      # options::
      #   Specify optional security settings.
      #   The type of this field is nilable +Options+ (+object+).
      #
      # == Returns:
      # An object with the following fields:
      # request_id::
      #   Globally unique UUID that is returned with every API call. This value is important to log for debugging purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
      #   The type of this field is +String+.
      # user_id::
      #   The unique ID of the affected User.
      #   The type of this field is +String+.
      # session_token::
      #   A secret token for a given Stytch Session.
      #   The type of this field is +String+.
      # session_jwt::
      #   The JSON Web Token (JWT) for a given Stytch Session.
      #   The type of this field is +String+.
      # user::
      #   The `user` object affected by this API call. See the [Get user endpoint](https://stytch.com/docs/api/get-user) for complete response field details.
      #   The type of this field is +User+ (+object+).
      # status_code::
      #   The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g. 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
      #   The type of this field is +Integer+.
      # session::
      #   If you initiate a Session, by including `session_duration_minutes` in your authenticate call, you'll receive a full Session object in the response.
      #
      #   See [GET sessions](https://stytch.com/docs/api/session-get) for complete response fields.
      #
      #   The type of this field is nilable +Session+ (+object+).
      def reset(
        token:,
        password:,
        session_token: nil,
        session_duration_minutes: nil,
        session_jwt: nil,
        code_verifier: nil,
        session_custom_claims: nil,
        attributes: nil,
        options: nil
      )
        headers = {}
        request = {
          token: token,
          password: password
        }
        request[:session_token] = session_token unless session_token.nil?
        request[:session_duration_minutes] = session_duration_minutes unless session_duration_minutes.nil?
        request[:session_jwt] = session_jwt unless session_jwt.nil?
        request[:code_verifier] = code_verifier unless code_verifier.nil?
        request[:session_custom_claims] = session_custom_claims unless session_custom_claims.nil?
        request[:attributes] = attributes unless attributes.nil?
        request[:options] = options unless options.nil?

        post_request('/v1/passwords/email/reset', request, headers)
      end
    end

    class ExistingPassword
      include Stytch::RequestHelper

      def initialize(connection)
        @connection = connection
      end

      # Reset the Userâ€™s password using their existing password.
      #
      # Note that a successful password reset via an existing password will revoke all active sessions for the `user_id`.
      #
      # == Parameters:
      # email::
      #   The email address of the end user.
      #   The type of this field is +String+.
      # existing_password::
      #   The user's existing password.
      #   The type of this field is +String+.
      # new_password::
      #   The new password for the user.
      #   The type of this field is +String+.
      # session_token::
      #   The `session_token` associated with a User's existing Session.
      #   The type of this field is nilable +String+.
      # session_duration_minutes::
      #   Set the session lifetime to be this many minutes from now. This will start a new session if one doesn't already exist,
      #   returning both an opaque `session_token` and `session_jwt` for this session. Remember that the `session_jwt` will have a fixed lifetime of
      #   five minutes regardless of the underlying session duration, and will need to be refreshed over time.
      #
      #   This value must be a minimum of 5 and a maximum of 527040 minutes (366 days).
      #
      #   If a `session_token` or `session_jwt` is provided then a successful authentication will continue to extend the session this many minutes.
      #
      #   If the `session_duration_minutes` parameter is not specified, a Stytch session will not be created.
      #   The type of this field is nilable +Integer+.
      # session_jwt::
      #   The `session_jwt` associated with a User's existing Session.
      #   The type of this field is nilable +String+.
      # session_custom_claims::
      #   Add a custom claims map to the Session being authenticated. Claims are only created if a Session is initialized by providing a value in `session_duration_minutes`. Claims will be included on the Session object and in the JWT. To update a key in an existing Session, supply a new value. To delete a key, supply a null value.
      #
      #   Custom claims made with reserved claims ("iss", "sub", "aud", "exp", "nbf", "iat", "jti") will be ignored. Total custom claims size cannot exceed four kilobytes.
      #   The type of this field is nilable +object+.
      #
      # == Returns:
      # An object with the following fields:
      # request_id::
      #   Globally unique UUID that is returned with every API call. This value is important to log for debugging purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
      #   The type of this field is +String+.
      # user_id::
      #   The unique ID of the affected User.
      #   The type of this field is +String+.
      # session_token::
      #   A secret token for a given Stytch Session.
      #   The type of this field is +String+.
      # session_jwt::
      #   The JSON Web Token (JWT) for a given Stytch Session.
      #   The type of this field is +String+.
      # user::
      #   The `user` object affected by this API call. See the [Get user endpoint](https://stytch.com/docs/api/get-user) for complete response field details.
      #   The type of this field is +User+ (+object+).
      # status_code::
      #   The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g. 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
      #   The type of this field is +Integer+.
      # session::
      #   If you initiate a Session, by including `session_duration_minutes` in your authenticate call, you'll receive a full Session object in the response.
      #
      #   See [GET sessions](https://stytch.com/docs/api/session-get) for complete response fields.
      #
      #   The type of this field is nilable +Session+ (+object+).
      def reset(
        email:,
        existing_password:,
        new_password:,
        session_token: nil,
        session_duration_minutes: nil,
        session_jwt: nil,
        session_custom_claims: nil
      )
        headers = {}
        request = {
          email: email,
          existing_password: existing_password,
          new_password: new_password
        }
        request[:session_token] = session_token unless session_token.nil?
        request[:session_duration_minutes] = session_duration_minutes unless session_duration_minutes.nil?
        request[:session_jwt] = session_jwt unless session_jwt.nil?
        request[:session_custom_claims] = session_custom_claims unless session_custom_claims.nil?

        post_request('/v1/passwords/existing_password/reset', request, headers)
      end
    end

    class Sessions
      include Stytch::RequestHelper

      def initialize(connection)
        @connection = connection
      end

      # Reset the userâ€™s password using their existing session. The endpoint will error if the session does not have a password, email magic link, or email OTP authentication factor that has been issued within the last 5 minutes. This endpoint requires either a `session_jwt` or `session_token` be included in the request.
      #
      # Note that a successful password reset via an existing session will revoke all active sessions for the `user_id`, except for the one used during the reset flow.
      #
      # == Parameters:
      # password::
      #   The password of the user
      #   The type of this field is +String+.
      # session_token::
      #   The `session_token` associated with a User's existing Session.
      #   The type of this field is nilable +String+.
      # session_jwt::
      #   The `session_jwt` associated with a User's existing Session.
      #   The type of this field is nilable +String+.
      # session_duration_minutes::
      #   Set the session lifetime to be this many minutes from now. This will start a new session if one doesn't already exist,
      #   returning both an opaque `session_token` and `session_jwt` for this session. Remember that the `session_jwt` will have a fixed lifetime of
      #   five minutes regardless of the underlying session duration, and will need to be refreshed over time.
      #
      #   This value must be a minimum of 5 and a maximum of 527040 minutes (366 days).
      #
      #   If a `session_token` or `session_jwt` is provided then a successful authentication will continue to extend the session this many minutes.
      #
      #   If the `session_duration_minutes` parameter is not specified, a Stytch session will not be created.
      #   The type of this field is nilable +Integer+.
      # session_custom_claims::
      #   Add a custom claims map to the Session being authenticated. Claims are only created if a Session is initialized by providing a value in `session_duration_minutes`. Claims will be included on the Session object and in the JWT. To update a key in an existing Session, supply a new value. To delete a key, supply a null value.
      #
      #   Custom claims made with reserved claims ("iss", "sub", "aud", "exp", "nbf", "iat", "jti") will be ignored. Total custom claims size cannot exceed four kilobytes.
      #   The type of this field is nilable +object+.
      #
      # == Returns:
      # An object with the following fields:
      # request_id::
      #   Globally unique UUID that is returned with every API call. This value is important to log for debugging purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
      #   The type of this field is +String+.
      # user_id::
      #   The unique ID of the affected User.
      #   The type of this field is +String+.
      # user::
      #   The `user` object affected by this API call. See the [Get user endpoint](https://stytch.com/docs/api/get-user) for complete response field details.
      #   The type of this field is +User+ (+object+).
      # session_token::
      #   A secret token for a given Stytch Session.
      #   The type of this field is +String+.
      # session_jwt::
      #   The JSON Web Token (JWT) for a given Stytch Session.
      #   The type of this field is +String+.
      # status_code::
      #   The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g. 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
      #   The type of this field is +Integer+.
      # session::
      #   If you initiate a Session, by including `session_duration_minutes` in your authenticate call, you'll receive a full Session object in the response.
      #
      #   See [GET sessions](https://stytch.com/docs/api/session-get) for complete response fields.
      #
      #   The type of this field is nilable +Session+ (+object+).
      def reset(
        password:,
        session_token: nil,
        session_jwt: nil,
        session_duration_minutes: nil,
        session_custom_claims: nil
      )
        headers = {}
        request = {
          password: password
        }
        request[:session_token] = session_token unless session_token.nil?
        request[:session_jwt] = session_jwt unless session_jwt.nil?
        request[:session_duration_minutes] = session_duration_minutes unless session_duration_minutes.nil?
        request[:session_custom_claims] = session_custom_claims unless session_custom_claims.nil?

        post_request('/v1/passwords/session/reset', request, headers)
      end
    end
  end
end
