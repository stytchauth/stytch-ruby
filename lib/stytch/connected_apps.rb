# frozen_string_literal: true

# !!!
# WARNING: This file is autogenerated
# Only modify code within MANUAL() sections
# or your changes may be overwritten later!
# !!!

require_relative 'request_helper'

module Stytch
  class ConnectedApp
    include Stytch::RequestHelper
    attr_reader :clients

    def initialize(connection)
      @connection = connection

      @clients = Stytch::ConnectedApp::Clients.new(@connection)
    end

    class Clients
      include Stytch::RequestHelper
      attr_reader :secrets

      def initialize(connection)
        @connection = connection

        @secrets = Stytch::ConnectedApp::Clients::Secrets.new(@connection)
      end

      def get(
        client_id:
      )
        headers = {}
        query_params = {}
        request = request_with_query_params("/v1/connected_apps/clients/#{client_id}", query_params)
        get_request(request, headers)
      end

      def update(
        client_id:,
        client_name: nil,
        client_description: nil,
        redirect_urls: nil,
        full_access_allowed: nil,
        access_token_expiry_minutes: nil,
        access_token_custom_audience: nil,
        access_token_template_content: nil,
        post_logout_redirect_urls: nil,
        logo_url: nil,
        bypass_consent_for_offline_access: nil
      )
        headers = {}
        request = {}
        request[:client_name] = client_name unless client_name.nil?
        request[:client_description] = client_description unless client_description.nil?
        request[:redirect_urls] = redirect_urls unless redirect_urls.nil?
        request[:full_access_allowed] = full_access_allowed unless full_access_allowed.nil?
        request[:access_token_expiry_minutes] = access_token_expiry_minutes unless access_token_expiry_minutes.nil?
        request[:access_token_custom_audience] = access_token_custom_audience unless access_token_custom_audience.nil?
        request[:access_token_template_content] = access_token_template_content unless access_token_template_content.nil?
        request[:post_logout_redirect_urls] = post_logout_redirect_urls unless post_logout_redirect_urls.nil?
        request[:logo_url] = logo_url unless logo_url.nil?
        request[:bypass_consent_for_offline_access] = bypass_consent_for_offline_access unless bypass_consent_for_offline_access.nil?

        put_request("/v1/connected_apps/clients/#{client_id}", request, headers)
      end

      def delete(
        client_id:
      )
        headers = {}
        delete_request("/v1/connected_apps/clients/#{client_id}", headers)
      end

      def search(
        cursor: nil,
        limit: nil
      )
        headers = {}
        request = {}
        request[:cursor] = cursor unless cursor.nil?
        request[:limit] = limit unless limit.nil?

        post_request('/v1/connected_apps/clients/search', request, headers)
      end

      def create(
        client_type:,
        redirect_urls:,
        full_access_allowed:,
        post_logout_redirect_urls:,
        client_name: nil,
        client_description: nil,
        access_token_expiry_minutes: nil,
        access_token_custom_audience: nil,
        access_token_template_content: nil,
        logo_url: nil,
        bypass_consent_for_offline_access: nil
      )
        headers = {}
        request = {
          client_type: client_type,
          redirect_urls: redirect_urls,
          full_access_allowed: full_access_allowed,
          post_logout_redirect_urls: post_logout_redirect_urls
        }
        request[:client_name] = client_name unless client_name.nil?
        request[:client_description] = client_description unless client_description.nil?
        request[:access_token_expiry_minutes] = access_token_expiry_minutes unless access_token_expiry_minutes.nil?
        request[:access_token_custom_audience] = access_token_custom_audience unless access_token_custom_audience.nil?
        request[:access_token_template_content] = access_token_template_content unless access_token_template_content.nil?
        request[:logo_url] = logo_url unless logo_url.nil?
        request[:bypass_consent_for_offline_access] = bypass_consent_for_offline_access unless bypass_consent_for_offline_access.nil?

        post_request('/v1/connected_apps/clients', request, headers)
      end

      class Secrets
        include Stytch::RequestHelper

        def initialize(connection)
          @connection = connection
        end

        def rotate_start(
          client_id:
        )
          headers = {}
          request = {}

          post_request("/v1/connected_apps/clients/#{client_id}/secrets/rotate/start", request, headers)
        end

        def rotate_cancel(
          client_id:
        )
          headers = {}
          request = {}

          post_request("/v1/connected_apps/clients/#{client_id}/secrets/rotate/cancel", request, headers)
        end

        def rotate(
          client_id:
        )
          headers = {}
          request = {}

          post_request("/v1/connected_apps/clients/#{client_id}/secrets/rotate", request, headers)
        end
      end
    end
  end
end
